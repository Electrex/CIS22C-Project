package Modules;


import java.sql.Timestamp;
import java.text.SimpleDateFormat;

/**
 * Orders class - containing order information and customer preferences for a Product
 * @author mia
 *
 */
public class Order {
	
	
	private static int orderID; //TODO should I make this custID + timestamp + unique #? -- should we collect custID?
	private Timestamp orderDate;
	private Timestamp shipDate;
	private Product product;
	private int quantity;
	private String shipmentType;
	private boolean isShipped;
	private static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss");
	
	Order() {
		++orderID;
		orderDate = new Timestamp(System.currentTimeMillis());
		Timestamp shipDate = null;
		product = null;
		quantity = 0;
		shipmentType = null;
		isShipped = false;
	}
	
	Order(Product prod, int qty, String shipType) {
		++orderID;
		orderDate = new Timestamp(System.currentTimeMillis());
		Timestamp shipDate = null;
		product = prod;
		quantity = qty;
		shipmentType = shipType;
		isShipped = false;
	}
	
	/* ACCESSORS */
	
	public static int getOrderID() {
		return orderID;
	}
	
	public String getOrderDate() {
		return sdf.format(orderDate);
	}
	
	public String getShipDate() {
		return sdf.format(shipDate);
	}
	
	public Product getProduct() {
		return product;
	}

	public int getQuantity() {
		return quantity;
	}

	public String getShipmentType() {
		return shipmentType;
	}

	public boolean getIsShipped() {
		return isShipped;
	}
	
	/* MUTATORS */
	
	public static void setOrderID(int orderID) {
		Order.orderID = orderID;
	}

	public void setOrderDate(Timestamp orderDate) {
		this.orderDate = orderDate;
	}

	/**
	 * Sets ship date as NOW (current time & date).
	 */
	public void setShipDate() {
		this.shipDate =  new Timestamp(System.currentTimeMillis());;
	}

	public void setProduct(Product product) {
		this.product = product;
	}

	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}
	
	public boolean swapShipmentType(String ship_type) {
		if (ship_type == "Rush Shipping" || ship_type == "Overnight Shipping" || ship_type == "Standard Shipping") {
			shipmentType = ship_type;
			return true;
		}
		else {
			return false;
		}
	}
	
	public void toggleIsShipped() {
		this.isShipped = !isShipped;
	}
	
	/* OTHER METHODS */
	
	@Override public String toString() {
		String result = "";
		return result;
	}

	@Override
	public int hashCode() {
		// TODO hashCode
		
		//autogenerated --edit?
		final int prime = 31;
		int result = 1;
		result = prime * result + (isShipped ? 1231 : 1237);
		result = prime * result + ((orderDate == null) ? 0 : orderDate.hashCode());
		result = prime * result + ((product == null) ? 0 : product.hashCode());
		result = prime * result + quantity;
		result = prime * result + ((shipDate == null) ? 0 : shipDate.hashCode());
		result = prime * result + ((shipmentType == null) ? 0 : shipmentType.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		// TODO equals
		
		//autogenerated --edit?
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Order other = (Order) obj;
		if (isShipped != other.isShipped)
			return false;
		if (orderDate == null) {
			if (other.orderDate != null)
				return false;
		} else if (!orderDate.equals(other.orderDate))
			return false;
		if (product == null) {
			if (other.product != null)
				return false;
		} else if (!product.equals(other.product))
			return false;
		if (quantity != other.quantity)
			return false;
		if (shipDate == null) {
			if (other.shipDate != null)
				return false;
		} else if (!shipDate.equals(other.shipDate))
			return false;
		if (shipmentType == null) {
			if (other.shipmentType != null)
				return false;
		} else if (!shipmentType.equals(other.shipmentType))
			return false;
		return true;
	}
	
	@Override
	public int compareTo(Object obj) {
		//TODO compareTo()
	}
	}
	
	
	
}
